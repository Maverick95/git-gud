Would be good to come up with some example jobs to do with shell scripts.

Count the number of solution files .sln within a folder,
and list them.
Should be easy enough.
Need to write a (recursive) function that checks the number of .sln files in a folder.
If they encounter a folder, then recurse on this folder.
So need to look up functions first of all.
Should be easy enough.
Problem with your approach is, there is probably a much simpler way.
Are there any better sources for learning about shell script basics?


Script ideas -

a) a script that checks and syncs your local GIT repository with a remote one,
this ensures that if there is a repo that say you hardly use, but other people
commit to it, yours stays up to date.

https://www.grymoire.com/Unix/Bourne.html

Currently on
https://www.grymoire.com/Unix/Bourne.html#toc-uh-39

https://git-scm.com/docs/git-shell

What are awk and sed?

You have access to the UNIX command "make",
looking into makefiles might be interesting.

Enough rubbish, I want to write a proper script.

Okay, so there are probably some ways of doing this.
But it involves you dealing with the header file first, and then each subsequent line.
And I'm not sure if the UNIX operations can really help you.

Can you have pipes that include your own functions / processses / scripts?

https://swcarpentry.github.io/shell-novice/06-script/index.html

With the output of ps, manipulating this currently appears to be a pain,
because the output as you have it now, follows no simple structure.

The question with pipes I want to answer is,
if I run this command,
ps -fW | wc -l
there is only one line outputted,
i.e. wc accepts one input, that is the entire output of ps -fW
i.e. you cannot use wc on a line-by-line basis.
I don't understand how piping the output of a process is used in the following
process. Are the output(s) available as variables? How do you actually access and use them?
Or is it the read command?
Yes, I think it is the read command

This is the command that will unlock EVERYTHING.

As with all new languages, difficult to know where to start, in terms of thinking in the tools given.

As an interesting example, I would like to see how I go on, by processing table output.

What do you want to try and do?

PIDs.

I would exploit knowledge of the system.

Using -sW,

PID runs chars 0-4
COMMAND runs chars 24-end

Interested in a shell script to get all commits associated with a particular #number.

But first would like to see the /usr/bin folder in the PATH.

Read up on expr on Grymoire, this may really help.

I've got the feeling there's a MUCH better way of doing the PATH thing.

Okay, continue with the next challenge.
Try and get all the commit hashes associated with a ticket number.

Next step is to read each file and look for #ticketnumber

Nice job on workshy, would be good to add some instructions.

I want to try and use shell scripts to understand more about what is going on
on my PC, the main goal being, can I speed up my old PC?

I am especially interested in the services on my PC.
And how can I get information on these?
How can I track the scheduling of the services?

Or more importantly, what are the 
Next goals - look at sed and awk.

TODO - look at getopts this may help a lot

TODO - maybe look at the git plumbing commands
instead of the user-facing commands, may be better for your needs.

https://www.gnu.org/software/coreutils/manual/html_node/index.html#SEC_Contents

What shell script things can I work on?

I would consider just reading through the standard unix commands and
learning new things.

Have a look at how the git-bash boots up and adding custom paths for your
shitty scripts

chroot
Finally

What would be great practice for scripts is to find some exe applications
that give strong data output.

Can you use sed to modify your pathfinder command to print off the path where it was found?

I'm not that good.

Trying to do anything in sed or awk is really tricky.

There's a really steep learning curve, and tbh I'm tired and frustrated.

Okay, so what you need to do, is -

a) decide on things you WANT to do,
b) break these down into SPECIFICATIONS,
c) read through SED and work it out.

1) Return established connections through NETSTAT along with the header.

Return rows where EITHER -
a) it is the header row, OR
b) it ends with ESTABLISHED

https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/netstat

What does the output mean? Interpretation of Local Address / Foreign Address
What is IP address 0.0.0.0?
https://unix.stackexchange.com/questions/107962/what-does-0-0-0-0-mean-in-netstat
What is a listening port?
https://linuxize.com/post/check-listening-ports-linux/
What is 127.0.0.1?
https://en.wikipedia.org/wiki/Localhost

Maybe read up a little bit on TCP, might be interesting.
https://en.wikipedia.org/wiki/Transmission_Control_Protocol

What if you tried to establish a TCP connection with say an ASP.NET server running locally?

http://www.medianet.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf

Maybe read a bit more later.
Start off with something simpler like ARP.
